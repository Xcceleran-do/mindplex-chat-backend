name: Deploy Staging to AWS ECS

# on:
#   workflow_run:
#     workflows: ["Project Tests"]
#     types:
#       - completed

on:
  push:
    branches: ["sta"]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: stagingchat
  ECS_CLUSTER: DevCluster
  ECS_SERVICE: stagingchat-service-poeaq6qx
  ECS_TASK_DEFINITION: stagingchat

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    # Check the branch and workflow conclusion is success
    # if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}    

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Replace env values in task definition 
      run: |
        sed -i 's|REPLACE_ME_MINDPLEX_URL|${{ secrets.MINDPLEX_URL }}|g' .aws/task-definition.json

        sed -i 's|REPLACE_ME_POSTGRES_USER|${{ secrets.POSTGRES_USER }}|g' .aws/task-definition.json
        sed -i 's|REPLACE_ME_POSTGRES_PASSWORD|${{ secrets.POSTGRES_PASSWORD }}|g' .aws/task-definition.json
        sed -i 's|REPLACE_ME_POSTGRES_DB|${{ secrets.POSTGRES_DB }}|g' .aws/task-definition.json
        sed -i 's|REPLACE_ME_POSTGRES_HOST|${{ secrets.POSTGRES_HOST }}|g' .aws/task-definition.json
        sed -i 's|REPLACE_ME_POSTGRES_PORT|${{ secrets.POSTGRES_PORT }}|g' .aws/task-definition.json

        sed -i 's|REPLACE_ME_ENVIRONMENT|${{ secrets.ENVIRONMENT }}|g' .aws/task-definition.json

        sed -i 's|REPLACE_ME_PGADMIN_DEFAULT_EMAIL|${{ secrets.PGADMIN_DEFAULT_EMAIL }}|g' .aws/task-definition.json
        sed -i 's|REPLACE_ME_PGADMIN_DEFAULT_PASSWORD|${{ secrets.PGADMIN_DEFAULT_PASSWORD }}|g' .aws/task-definition.json

        sed -i 's|REPLACE_ME_PUBLIC_CHAT_BACKEND_HOST|${{ secrets.PUBLIC_CHAT_BACKEND_HOST }}|g' .aws/task-definition.json

    - name: Update web container
      id: task-def1
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: .aws/task-definition.json
        container-name: web
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def1.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
